#include <EEPROMex.h>
#include <EEPROMVar.h>

// ===================================================================================================================================================================================================== 
//                            Joe's Drive  - Remote - Updated 4/14
//
//             ***         You are free to use, and share this code as long as it is not sold. There is no warranty, guarantee, or other tomfoolery. 
//                         This entire project was masterminded by an average Joe, your mileage may vary. 
// ===================================================================================================================================================================================================== 
//                            Written by Joe Latiola - https://www.facebook.com/groups/JoesDrive/
//                            You will need libraries: EepromEX: https://github.com/thijse/Arduino-EEPROMEx
//                                                     SSD1306AsciiWire: https://github.com/greiman/SSD1306Ascii 
//
//
// ===================================================================================================================================================================================================== 
// =====================================================================================================================================================================================================


#define battPin     A6
#define btStatePin  11
#define enablePin   10
#define lSelect     6
#define lHorizontal A2
#define lVertical   A3
#define lBut1       9
#define lBut2       8
#define lBut3       7
#define rSelect     2
#define rHorizontal A1
#define rVertical   A0
#define rBut1       5
#define rBut2       4
#define rBut3       3



#include <EEPROMex.h>   // https://github.com/thijse/Arduino-EEPROMEx
#include "Arduino.h"
#include <Wire.h>
#include "SSD1306AsciiWire.h"
#define I2C_ADDRESS 0x3C
SSD1306AsciiWire oled;

int ch1; //main drive
int ch2; //tilt / steer
int ch3; //head tilt
int ch4; //head spin
int ch1a; //main drive
int ch2a; //tilt / steer
int ch3a; //head tilt
int ch4a; //head spin
int but1; //Select on left joystick
int but2; //left 1
int but3; //left 2
int but4; //left3
int but5; //Select on right joystick
int but6; //right 1
int but6Speed = 1;
int but6State = 0;
int but6SpeedLast = 5;
int but7; //right 2
int but8; //right 3
int motorEnable; //toggle on top

int ch1Center;
int ch2Center;
int ch3Center;
int ch4Center;

int state = 0;
int stateLast = 0;

long previousMillis;
long interval = 40;
long previousMillisScreen;
unsigned long bodyCalibrationMillis;

float bodyBatt = 0.0;
float domeBatt = 0.0;
float remoteBatt = 0.0;
int bodyStatus;
int driveSpeed = 55;
int lastDriveSpeed = 55;
int lastBodyStatus = 0;
int calibrationMarker;



const byte numChars = 32;
char receivedChars[numChars];
char tempChars[numChars];   

boolean newData = false;

long but8Millis;
int but8State;


void setup(){
  
   Serial.begin(115200); 
   pinMode  (rSelect, INPUT_PULLUP);     
   pinMode  (rBut1, INPUT_PULLUP);     
   pinMode  (rBut2, INPUT_PULLUP);     
   pinMode  (rBut3, INPUT_PULLUP); 
   pinMode  (lSelect, INPUT_PULLUP);  
   pinMode  (lBut1, INPUT_PULLUP);    
   pinMode  (lBut2, INPUT_PULLUP); 
   pinMode  (lBut3, INPUT_PULLUP); 
   pinMode  (enablePin, INPUT_PULLUP); 
   pinMode  (btStatePin, INPUT); // check for Bluetooth enable

   Wire.begin();     
    oled.begin(&Adafruit128x64, I2C_ADDRESS);
    oled.set400kHz(); 
    oled.setFont(Callibri15);
    //oled.clear();  
    oled.println(F("==========================="));
    oled.println(F("            Joe's Drive       "));
    oled.println(F("==========================="));
    delay(2000);
    oled.clear();

    ch1Center = EEPROM.readInt(0);
    ch2Center = EEPROM.readInt(4);
    ch3Center = EEPROM.readInt(8);
    ch4Center = EEPROM.readInt(12);

    if(ch1Center < 100){
      ch1Center = 512;
    }
    if(ch2Center < 100){
      ch2Center = 512;
    }
    if(ch3Center < 100){
      ch3Center = 512;
    }
    if(ch4Center < 100){
      ch4Center = 512;
    }

}




void loop(){  

    recvWithStartEndMarkers();
    if (newData == true) {
        strcpy(tempChars, receivedChars);
            // this temporary copy is necessary to protect the original data
            //   because strtok() used in parseData() replaces the commas with \0
        parseData();
        newData = false;
    }

  unsigned long currentMillis = millis();

  if(bodyStatus == 0){  
    if((currentMillis - previousMillisScreen > 15000 && calibrationMarker == 0) || (but6SpeedLast != but6Speed) || (stateLast != state)) {
      previousMillisScreen = currentMillis;
      printVoltage();  
    }    
  }


  if(bodyStatus == 1 && (calibrationMarker == 0 || calibrationMarker == 1)){
    bodyCalibration();
  } else if (bodyStatus == 0){
    calibrationMarker = 0; 
  }

  if(currentMillis - previousMillis > interval) {
      previousMillis = currentMillis; 

      state = digitalRead(btStatePin);  // check to see when BT is paired
    
      ch1a = analogRead(rVertical); 
      ch2a = analogRead(rHorizontal);  
      ch3a = analogRead(lVertical);    
      ch4a = analogRead(lHorizontal);  
      but1 = digitalRead(lSelect); 
      but2 = digitalRead(lBut1);   
      but3 = digitalRead(lBut2);   
      but4 = digitalRead(lBut3); 
      but5 = digitalRead(rSelect);  
      but6 = digitalRead(rBut1); 
      but7 = digitalRead(rBut2);  
      but8 = digitalRead(rBut3);
      motorEnable = digitalRead(enablePin);
    
    
      remoteBatt = analogRead(battPin);
      remoteBatt /= 1023;
      remoteBatt *= 5;
      
    
      if (ch1a == ch1Center){
        ch1 = 256;
      }else if (ch1a > ch1Center){
        ch1 = map(ch1a, ch1Center, 1023, 255, 0);
      }else if (ch1a < ch1Center){
        ch1 = map(ch1a, 0, ch1Center, 512, 257);
      }
    
      if (ch2a == ch2Center){
        ch2 = 256;
      }else if (ch2a > ch2Center){
        ch2 = map(ch2a, ch2Center, 1023, 255, 0);
      }else if (ch2a < ch2Center){
        ch2 = map(ch2a, 0, ch2Center, 512, 257);
      }
    
      if (ch3a == ch3Center){
        ch3 = 256;
      }else if (ch3a > ch3Center){
        ch3 = map(ch3a, ch3Center, 1023, 255, 0);
      }else if (ch3a < ch3Center){
        ch3 = map(ch3a, 0, ch3Center, 512, 257);
      }
    
      if (ch4a == ch4Center){
        ch4 = 256;
      }else if (ch4a > ch4Center){
        ch4 = map(ch4a, ch4Center, 1023, 255, 0);
      }else if (ch4a < ch4Center){
        ch4 = map(ch4a, 0, ch4Center, 512, 257);
      }
    
      if (but8 == 0){
         timeRightBut8();
      }else if (but8 == 1 || motorEnable == 0){
          but8State = 0;
      }

      if(but6 == 0 && but6State == 0){
        setDriveSpeed();
      }else if(but6 == 1 && but6State ==1){
        but6State = 0; 
      }
      
    
          Serial.print (F("<"));
          Serial.print (ch1);
          Serial.print (F(","));
          Serial.print (ch2);
          Serial.print (F(","));
          Serial.print (ch3);
          Serial.print (F(","));
          Serial.print (ch4);
          Serial.print (F(","));
          Serial.print (but1);
          Serial.print (F(","));
          Serial.print (but2);
          Serial.print (F(","));
          Serial.print (but3);
          Serial.print (F(","));
          Serial.print (but4);
          Serial.print (F(","));
          Serial.print (but5);
          Serial.print (F(","));
          Serial.print (but6Speed);
          Serial.print (F(","));
          Serial.print (but7);
          Serial.print (F(","));
          Serial.print (but8);
          Serial.print (F(","));
          Serial.print (motorEnable);
          Serial.println (F(">"));
      
  } 
}

//==================================  Receive data from body  ====================================

void recvWithStartEndMarkers() {
    static boolean recvInProgress = false;
    static byte ndx = 0;
    char startMarker = '<';
    char endMarker = '>';
    char rc;

    while (Serial.available() > 0 && newData == false) {
        rc = Serial.read();

        if (recvInProgress == true) {
            if (rc != endMarker) {
                receivedChars[ndx] = rc;
                ndx++;
                if (ndx >= numChars) {
                    ndx = numChars - 1;
                }
            }
            else {
                receivedChars[ndx] = '\0'; // terminate the string
                recvInProgress = false;
                ndx = 0;
                newData = true;
            }
        }

        else if (rc == startMarker) {
            recvInProgress = true;
        }
    }
}

//==================================  Parse the data received from the body  ====================================

void parseData() {      // split the data into its parts

    char * strtokIndx; // this is used by strtok() as an index

    strtokIndx = strtok(tempChars,",");      // get the first part - the string
    bodyBatt = atof(strtokIndx); 
    strtokIndx = strtok(NULL, ",");
    domeBatt = atof(strtokIndx);     // convert this part to a float
    strtokIndx = strtok(NULL, ","); 
    bodyStatus = atoi(strtokIndx); 
    strtokIndx = strtok(NULL, ","); 
    driveSpeed = atoi(strtokIndx);

}

//==================================  Times how long far right button is depressed  ====================================

  void timeRightBut8(){

    unsigned long currentMillisCenter = millis();

    if (but8 == 0 && motorEnable == 1 && but8State == 0){
      but8Millis = millis();
      but8State = 1;
    } 
    
    if (but8State == 1 && currentMillisCenter - but8Millis >= 3000){
      oled.clear();
      oled.setFont(Callibri15);
      oled.println(F("========================="));
      oled.println(F("   Joystick Calibration"));
      oled.println(F("========================="));
      delay(4000);
      oled.clear();
      oled.println(F("Release both joysticks"));
      oled.println(F("then press center "));
      oled.print(F("button on the right. >"));
      while (digitalRead(rBut2) == 1 && digitalRead(enablePin) == 1){}
      setJoystickCenter();
      but8State = 0;
      oled.clear();
    }

  }

//==================================  Set joystick centers  ====================================


  void setJoystickCenter(){

    ch1Center = ch1a;
    ch2Center = ch2a;
    ch3Center = ch3a;
    ch4Center = ch4a;

    
    EEPROM.writeInt(0,ch1Center);
    EEPROM.writeInt(4,ch2Center);
    EEPROM.writeInt(8,ch3Center);
    EEPROM.writeInt(12,ch4Center);
    delay(1000);
  }

//==================================  Calibrate body center  ====================================


    void bodyCalibration(){
      if(calibrationMarker == 0){
      oled.setCursor(0,0);
      oled.setFont(Callibri15);
      //oled.println(F("========================="));
      oled.println(F("** Body Calibration **            "));
      oled.println(F("1. Center BB8.                 "));
      oled.println(F("2. Disable motors.      "));
      oled.println(F("3. Press mid-rt button.            >          "));
      calibrationMarker = 1;
      }

  }

//==================================  Slow/Med/Fast  ====================================

  
    void setDriveSpeed(){
      
      if(but6Speed == 1){
        but6Speed = 2;
      }else if(but6Speed == 2){
        but6Speed = 3;
      }else if(but6Speed == 3){
        but6Speed = 1;
      }
      but6State = 1;
  }


//==================================  Update screen  ====================================


  void printVoltage(){
      oled.setCursor(0,0);
      oled.setFont(Callibri15);
      oled.print(F("Body: "));
      oled.print(bodyBatt);
      oled.print(F("V          "));
      if(but6Speed == 1){
        oled.println(F("Slow    "));
      }else if(but6Speed == 2){
        oled.println(F("Med    "));
      }else if(but6Speed == 3){
        oled.println(F("Fast    "));
      }
      oled.print(F("Dome: "));
      oled.print(domeBatt);
      oled.println(F("V                            "));
      oled.print(F("Remote: "));
      oled.print(remoteBatt);
      oled.println(F("V                             "));
      oled.print(F("BT: "));
      if (state == 0) {
        oled.println(F("Not Connected                     "));
      } else {
        oled.println(F("Connected                      "));
      }
      if(but6SpeedLast != but6Speed){
        but6SpeedLast = but6Speed;
      }
      if(stateLast != state){
        stateLast = state;
      }
  }

