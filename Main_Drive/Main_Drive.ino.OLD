// ===================================================================================================================================================================================================== 
//                            Joe's Drive  - Main drive mechanism - Updated 6/1
//
//             ***         You are free to use, and share this code as long as it is not sold. There is no warranty, guarantee, or other tomfoolery. 
//                         This entire project was masterminded by an average Joe, your mileage may vary. 
// ===================================================================================================================================================================================================== 
//                            Written by Joe Latiola - https://www.facebook.com/groups/JoesDrive/
//                            You will need libraries: EepromEX: https://github.com/thijse/Arduino-EEPROMEx
//                                                     i2cdevlib: https://github.com/jrowberg/i2cdevlib
//                                                     PIDLibrary: http://playground.arduino.cc/Code/PIDLibrary  
//
//
// ===================================================================================================================================================================================================== 
// =====================================================================================================================================================================================================
// Update these as necessary to match your setup

 
#define enablePin 31          // Pin that provides power to motor driver enable pins
#define enablePinDome 29      // Pin that provides power to Dome motor driver enable pin
#define S2SpotPin A0          // Pin connected to side tilt potentiometer 
#define readpin 34            // Pin connected to ACT on soundboard
#define soundpin1 26          // Connected to sound pin 0
#define soundpin2 28          // Connected to sound pin 1
#define soundpin3 30          // Connected to sound pin 2
#define soundpin4 32          // Connected to sound pin 3
#define soundpin5 46          // Connected to sound pin 4
#define soundpin6 44          // Connected to sound pin 5
#define fadePin A2            // Connected to + of one channel on sound board(use resistor to ground)
#define BTstatePin 33         // Connected to state pin on BT Module
#define domeTiltPotPin A1     // Connected to Potentiometer on the dome tilt mast
#define easeDome 20           // Lower number means more easing when spinning
#define easeDomeTilt 1      // Lower number means more easing when moving forward and back a.k.a. slower
#define battMonitor A3        // Pin used to monitor battery voltage
#define outputVoltage 5.2     // This is the output voltage from the Buck Converter powering the arduino
#define drivePWM1 11          // PWM Pin for movement, swap the pin numbers on this axis if axis is reversed
#define drivePWM2 12          // PWM Pin for movement, swap the pin numbers on this axis if axis is reversed
#define s2sPWM1 3             // PWM Pin for movement, swap the pin numbers on this axis if axis is reversed
#define s2sPWM2 4             // PWM Pin for movement, swap the pin numbers on this axis if axis is reversed
#define domeTiltPWM1 5        // PWM Pin for movement, swap the pin numbers on this axis if axis is reversed
#define domeTiltPWM2 6        // PWM Pin for movement, swap the pin numbers on this axis if axis is reversed
#define domeSpinPWM1 7        // PWM Pin for movement, swap the pin numbers on this axis if axis is reversed
#define domeSpinPWM2 8        // PWM Pin for movement, swap the pin numbers on this axis if axis is reversed
#define resistor1 151000      // Larger resisitor used on voltage divider to read battery level
#define resistor2 82000       // Smaller resisitor used on voltage divider to read battery level







         #define DoDomeRecv
         #define printRemote              // Uncomment to see values passed from controller
         //#define debugS2S                 // Uncomment to see Side tilt variables, PID values, ETC.
         //#define debugDrive               // Uncomment to see main drive variables, PID values, ETC.
         //#define debugDomeTilt            // Uncomment to see Dome tilt variables, PID values, ETC.
         //#define debugdomeRotation        // Uncomment to see Dome rotation variables, PID values, ETC.
         //#define debugPSI                 // Uncomment to see PSI values.
         //#define printbodyVin             // Uncomment to see battery level 
         //#define printYPR                 // Uncomment to see Yaw, Pitch, and Roll
         //#define printDome                // Uncomment to see the Dome's Yaw
         //#define printOffsets             // Uncomment to see the offsets
         //#define debugRSelectMillis
         //#define printOutputs
         //#define printSoundPins





// =====================================================================================================================================================================================================
// =====================================================================================================================================================================================================
// 


#include <EEPROMex.h>   // https://github.com/thijse/Arduino-EEPROMEx
#include "Arduino.h"


// I2C device class (I2Cdev) demonstration Arduino sketch for MPU6050 class using DMP (MotionApps v2.0)
// 6/21/2012 by Jeff Rowberg <jeff@rowberg.net>
// Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib
//

/* ============================================
I2Cdev device library code is placed under the MIT license
Copyright (c) 2012 Jeff Rowberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
===============================================
*/


// I2Cdev and MPU6050 must be installed as libraries, or else the .cpp/.h files
// for both classes must be in the include path of your project
#include "I2Cdev.h"

#include "MPU6050_6Axis_MotionApps20.h"
//#include "MPU6050.h" // not necessary if using MotionApps include file


#include "Wire.h"

#include <PID_v1.h>  //PID loop from http://playground.arduino.cc/Code/PIDLibrary


MPU6050 mpu;
//MPU6050 mpu(0x69); // <-- use for AD0 high

/* =========================================================================
   NOTE: The MPU-6050's INT pin must be connected to pin 2.
 * ========================================================================= */

#define OUTPUT_READABLE_YAWPITCHROLL

#define LED_PIN 13 // (Arduino is 13, Teensy is 11, Teensy++ is 6)
bool blinkState = false;

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

int ch1;                //right joystick up/down
int ch2;                //right joystick left/right
int ch3;                //left joystick up/down
int ch4;                //left joystick left/right
int ch4Servo;           //left joystick left/right when using servo mode
int currentDomeSpeed;
int domeRotation;
int but1 = 1;           //left select
int but2 = 1;           //left button 1
int but3 = 1;           //left button 2
int but4 = 1;           //left button 3 
int but5 = 1;           //right select
int but6 = 1;           //right button 1
int but7 = 1;           //right button 2
int but8 = 1;           //right select
int motorEnable = 1;  
int fadeVal = 0; 
int readPinState = 1; 
int PSI = 0;
int soundPins[] = {soundpin1, soundpin2, soundpin3, soundpin4};
int randSoundPin;
int soundState;
int but6State = 0;
int musicState;
int autoDisableState;
unsigned long musicStateMillis = 0;
unsigned long but6LastDebounceTime = 0;
unsigned long but6DebounceDelay = 50;
unsigned long bodyStatusTime = 0;
unsigned long autoDisableMotorsMillis = 0;
int autoDisableDoubleCheck;
unsigned long autoDisableDoubleCheckMillis = 0;


float bodyVin= 0.0;
float R1 = resistor1; 
float R2 = resistor2; 

int joystickDrive;


int driveSpeed = 55;
int driveAccel;
// the speedArray is used to create an S curve for the 'throttle' of bb8
int speedArray[] = {0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,4,5,5,5,5,6,6,7,7,8,8,9,
9,10,10,11,12,12,13,13,14,15,16,16,17,18,19,19,20,21,22,23,24,25,26,26,27,28,29,30,
31,32,33,33,34,35,36,37,37,38,39,40,40,41,42,42,43,44,44,45,45,46,46,47,47,48,48,49,
49,50,50,50,51,51,51,52,52,52,52,53,53,53,53,54,54,54,54,54,55,55,55,55,55};

int joystickS2S;

int joystickDome;
double domeTiltOffset;
int domeTiltPot;

int bodyStatus = 0;
float countdown;

double yaw;
double roll;
double pitch;

int domeServo = 0;

int S2Spot;

int BTstate = 0;
int speedDomeTilt = 0;

//PID1 is for the side to side tilt
double Pk1 = 13;  
double Ik1 = 0;
double Dk1 = 0.3;
double Setpoint1, Input1, Output1, Output1a;    

PID PID1(&Input1, &Output1, &Setpoint1, Pk1, Ik1 , Dk1, DIRECT);   
 
//PID2 is for side to side stability
double Pk2 = .5; 
double Ik2 = 0;
double Dk2 = .01;
double Setpoint2, Input2, Output2, Output2a;    

PID PID2(&Input2, &Output2, &Setpoint2, Pk2, Ik2 , Dk2, DIRECT);    // PID Setup - S2S stability   

//PID3 is for the main drive
double Pk3 = 5; 
double Ik3 = 0;
double Dk3 = 0;
double Setpoint3, Input3, Output3, Output3a;    

PID PID3(&Input3, &Output3, &Setpoint3, Pk3, Ik3 , Dk3, DIRECT);    // Main drive motor

//PID4 is for dome tilt fwd/back
double Pk4 = 6;  
double Ik4 = 0;
double Dk4 = 0.05;
double Setpoint4, Input4, Output4, Output4a;    

PID PID4(&Input4, &Output4, &Setpoint4, Pk4, Ik4 , Dk4, DIRECT);   


//PID5 is for the dome spin servo
double Kp5=5, Ki5=0, Kd5=0;
double Setpoint5, Input5, Output5, Output5a;

PID PID5(&Input5, &Output5, &Setpoint5, Kp5, Ki5, Kd5, DIRECT);     

const byte numChars = 40;
char receivedChars[numChars];
char tempChars[numChars];        // temporary array for use when parsing


boolean newData = false;

double yawOffset;
double domeYawOffset;

const byte numCharsD = 32;
char receivedCharsD[numCharsD];
char tempCharsD[numCharsD];        // temporary array for use when parsing

      // variables to hold the parsed data
double domeYaw = 0.00;
double domeBatt = 0.00;
char textFromDome[numChars] = {0};

boolean newDataD = false;

long domeInterval = 1000;
long domeServoMillis;
long setOffsetMillis;

double pitchOffset;
double rollOffset;
int potOffsetS2S;
int domeTiltPotOffset;

int rSelectState = 0;

// ================================================================
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
    mpuInterrupt = true;
}




// ================================================================
// ===                      INITIAL SETUP                       ===
// ================================================================

void setup() {
    // join I2C bus (I2Cdev library doesn't do this automatically)

    Wire.begin();
    TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz). Comment this line if having compilation difficulties with TWBR.

    // initialize serial communication
    // (115200 chosen because it is required for Teapot Demo output, but it's
    // really up to you depending on your project)
    Serial.begin(115200);
    Serial1.begin(115200);
    Serial3.begin(115200);
    while (!Serial); // wait for Leonardo enumeration, others continue immediately

    // NOTE: 8MHz or slower host processors, like the Teensy @ 3.3v or Ardunio
    // Pro Mini running at 3.3v, cannot handle this baud rate reliably due to
    // the baud timing being too misaligned with processor ticks. You must use
    // 38400 or slower in these cases, or use some kind of external separate
    // crystal solution for the UART timer.

    // initialize device
    Serial.println(F("Initializing I2C devices..."));
    mpu.initialize();

    // verify connection
    Serial.println(F("Testing device connections..."));
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

    // load and configure the DMP
    Serial.println(F("Initializing DMP..."));
    devStatus = mpu.dmpInitialize();

    // supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    mpu.setYGyroOffset(76);
    mpu.setZGyroOffset(-85);
    mpu.setZAccelOffset(1788); // 1688 factory default for my test chip

    // make sure it worked (returns 0 if so)
    if (devStatus == 0) {
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
        mpu.setDMPEnabled(true);

        // enable Arduino interrupt detection
        Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
        attachInterrupt(0, dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
        dmpReady = true;

        // get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F("DMP Initialization failed (code "));
        Serial.print(devStatus);
        Serial.println(F(")"));
    }

    // configure LED for output
    pinMode(LED_PIN, OUTPUT);

    pinMode(enablePin, OUTPUT);  // enable pin
    pinMode(enablePinDome, OUTPUT);  // enable pin for dome spin
    pinMode(BTstatePin, INPUT);  // BT paired status

    pinMode(readpin, INPUT_PULLUP); // read stat of Act on Soundboard
    pinMode(soundpin1, OUTPUT); // play sound from pin 0 on Soundboard
    pinMode(soundpin2, OUTPUT); // play sound from pin 1 on Soundboard
    pinMode(soundpin3, OUTPUT); // play sound from pin 2 on Soundboard
    pinMode(soundpin4, OUTPUT); // play sound from pin 3 on Soundboard
    pinMode(soundpin5, OUTPUT); // play sound from pin 4 on Soundboard
    pinMode(soundpin6, OUTPUT); // play sound from pin 4 on Soundboard

    digitalWrite(soundpin6, HIGH);
    digitalWrite(soundpin5, HIGH);
    digitalWrite(soundpin4, HIGH);
    digitalWrite(soundpin3, HIGH);
    digitalWrite(soundpin2, HIGH);
    digitalWrite(soundpin1, HIGH);
    
    // *********** PID setup ***********

    PID1.SetMode(AUTOMATIC);              // PID Setup -  S2S SERVO     
    PID1.SetOutputLimits(-255, 255);
    PID1.SetSampleTime(15);

    PID2.SetMode(AUTOMATIC);              // PID Setup -  S2S Stability
    PID2.SetOutputLimits(-255, 255);
    PID2.SetSampleTime(15);

    PID3.SetMode(AUTOMATIC);              // PID Setup - main drive motor
    PID3.SetOutputLimits(-255, 255);
    PID3.SetSampleTime(15);

    PID4.SetMode(AUTOMATIC);              // PID Setup - dome tilt
    PID4.SetOutputLimits(-255, 255);
    PID4.SetSampleTime(15);

    PID5.SetMode(AUTOMATIC);
    PID5.SetOutputLimits(-255, 255);      // PID Setup - dome spin 'servo'
    PID5.SetSampleTime(15);


    // *********  Read offsets from EEPROM  **********
    
    pitchOffset = EEPROM.readFloat(0);
    rollOffset = EEPROM.readFloat(4);
    potOffsetS2S = EEPROM.readInt(8);
    domeTiltPotOffset = EEPROM.readInt(12);

    if (abs(rollOffset) + abs(pitchOffset) + abs(potOffsetS2S) + abs(domeTiltPotOffset) == 0 ){
      setOffsetsONLY();
      
    }

    
    }


 //     =======================================================================================================================================================================================
 //     =======================================================================================================================================================================================
 //     =====                                                                              LOOP                                                                                =====
 //     =======================================================================================================================================================================================
 //     =======================================================================================================================================================================================
 void loop() {

          readMPU();
          readRemote();
          readDome();
          sendRemote();
          sendDome();
          sounds();
          psiVal();
          readVin();
          BTenable();
          setDriveSpeed();
          bodyCalib();
          movement();

}



